---
import { Button } from "@/components/ui/button";
import AstroParticles from 'astro-particles'
import json from '@/data/particleOptions.json';
---

<!-- Overall section container -->
<section
  id="home"
  class="w-full h-[100vh] py-12 md:py-32 container flex flex-col justify-center md:justify-start"
>
  <div>
    <AstroParticles id="tsparticles" options={json} init="particlesInit"/>

    <!-- Div container for hero content -->
    <div class="flex flex-row items-center justify-center md:justify-start">
      <!-- Hero header / text -->
      <div class="zoomIn flex flex-col justify-center text-center md:text-left">
        
        <h1 class="h-[3rem] md:h-[4rem] lg:h-[5.5rem] xl:h-[7rem] text-3xl sm:text-5xl lg:text-7xl xl:text-8xl font-bold tracking-tight leading-loose animate-text bg-gradient-to-r from-emerald-500 via-purple-500 to-red-500 bg-clip-text text-transparent">
          Alex Taveras-Crespo
        </h1>
        <!-- Paragraph with type writer effect -->
        <p class="text-2xl md:text-3xl xl:text-5xl font-extralight mt-2 md:mt-1">
          <!-- Type writer effect span -->
          <span id="header" class="typewriter"></span>
        </p>

        <!-- Div for buttons -->
        <div class="flex flex-row justify-center sm:justify-start gap-2 mt-6">
          <Button
            variant={"secondary"}
            size={"sm"}
            className="w-1/3 sm:w-1/2 lg:w-1/4 xl:w-1/5 hover:-translate-y-1 duration-200 transition-all hover:shadow-md"
          >
            <a
              href="https://github.com/ataverascrespo"
              class="flex flex-row gap-2 items-center p-4"
            >
              <p class="hidden sm:block">Find me on</p>
              <img src="/github.svg" alt="github" />
            </a>
          </Button>
          <Button
            variant={"secondary"}
            size={"sm"}
            className="w-1/3 sm:w-1/2 lg:w-1/4 xl:w-1/5 hover:-translate-y-1 duration-200 transition-all hover:shadow-md"
          >
            <a
              href="https://www.linkedin.com/in/alex-taveras-crespo/"
              class="flex flex-row gap-2 items-center p-4"
            >
              <p class="hidden sm:block">Connect via</p>
              <img src="/linkedIn.svg" alt="github" />
            </a>
          </Button>
        </div>
        <!-- Div for buttons -->
      </div>
      <!-- Hero header / text -->
    </div>
    <!-- Div container for hero content -->
  </div>
</section>
<!-- Overall section container -->

<style>
  .typewriter {
    overflow: hidden; /* Ensures the content is not revealed until the animation */
    border-right: 0.10em solid teal; /* The typwriter cursor */
    white-space: nowrap; /* Keeps the content on a single line */
    margin: 0 auto; /* Gives that scrolling effect as the typing happens */
    animation:
      typing 3.5s steps(40, end),
      blink-caret 0.75s step-end infinite;
  }

  /* The typing effect */
  @keyframes typing {
    from {
      width: 0;
    }
    to {
      width: 100%;
    }
  }

  /* The typewriter cursor effect */
  @keyframes blink-caret {
    from,
    to {
      border-color: transparent;
    }
    50% {
      border-color: teal;
    }
  }
</style>


<script>
  import { type Container, type Engine, tsParticles } from "tsparticles-engine";
  import { loadFull } from 'tsparticles';
  
  
    window.particlesInit = async function (tsParticles: Engine) {
        await loadFull(tsParticles);
    }
    
    window.particlesLoaded = function (container: Container) {
        console.log("particlesLoaded callback");
    }
</script>

<script>
  //Callback function for intersectionObserver API
  const callback = function (entries: any) {
    entries.forEach((entry: any) => {
      if (entry.isIntersecting) {
        entry.target.classList.add("animate-zoomIn");
      }
    });
  };

  //Create an observer
  const observer = new IntersectionObserver(callback);

  //Observe when the selected element enters viewport
  document.querySelectorAll(".zoomIn").forEach(function (target) {
    observer.observe(target);
  });
</script>

<script>
  // Define the typewriter words
  const texts = [
    "I'm a Software Developer",
    "I'm a problem solver",
    "I'm a lifelong learner",
    "I'm 2 years into my professional journey",
    "I'm currently exploring cloud technologies",
  ];
  const speed = 110;
  const pause = 1000; // Word change delay

  function typeWriter(i = 0, index = 1, direction = 1) {
    let displayed = texts[i].slice(0, index);
    document.getElementById("header")!.textContent = displayed;

    if (displayed.length >= texts[i].length) {
      // start removing after pause
      setTimeout(() => typeWriter(i, index - 1, -1), pause);
    } else if (displayed.length === 0) {
      // go to next text after pause
      setTimeout(() => typeWriter((i + 1) % texts.length), pause);
    } else {
      // continue in the current direction
      setTimeout(() => typeWriter(i, index + direction, direction), speed);
    }
  }

  typeWriter();
</script>
